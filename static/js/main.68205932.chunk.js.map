{"version":3,"sources":["store/actions/actions.ts","store/types/types.ts","components/EditProfilePage.tsx","components/ProfilePage.tsx","components/HomePage.tsx","components/ErrorPage.tsx","App.tsx","serviceWorker.ts","store/reducers/reducers.ts","store/index.ts","index.tsx"],"names":["logOut","profile","type","payload","EditProfilePage","props","handleCityChange","e","setState","city","currentTarget","value","handleCohortChange","cohort","handleSpokenChange","spoken","handleProgrammingChange","programming","handleAboutMeChange","aboutMe","handleClick","event","preventDefault","state","updateProfile","uName","profiles","filter","loggedIn","name","handleRedirect","redirect","loggedOut","console","log","sessionStorage","setItem","window","location","href","this","password","id","to","component","ProfilePage","Grid","columns","Row","Column","width","color","Input","action","placeholder","size","Divider","horizontal","Container","fluid","Card","Image","src","wrapped","ui","Content","Header","Meta","className","Description","extra","Radio","as","label","defaultChecked","vertical","textAlign","Form","Segment","stacked","icon","iconPosition","onChange","Field","control","TextArea","Button","onClick","React","connect","ownProps","fields","divided","floated","Dropdown","text","Menu","Item","style","minHeight","content","Home","handleUserChange","userName","handlePassChange","passWord","handleSignUserChange","signUpUser","handleSignPassChange","signUpPass","handleOnClick","checkPass","handleSignUp","addProfile","duplicated","forEach","i","getItem","JSON","stringify","destString","undefined","height","circular","Icon","loading","Error","App","exact","path","ErrorPage","from","Component","Boolean","hostname","match","updateState","initialState","numUsers","update","parse","length","rootReducer","combineReducers","cred","index","slice","uNameLog","indexLog","indexUpdate","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.68205932.chunk.js","sourcesContent":["import {\r\n  ProfileActionTypes,\r\n  ADD_PROFILE,\r\n  Profile,\r\n  CHECK_PASS,\r\n  LOG_OUT,\r\n  UPDATE_PROFILE\r\n} from \"../types/types\";\r\n\r\n\r\n// The 4 different action definitions we have. These are DEFINED in types.ts\r\nexport function addProfile(profile: Profile): ProfileActionTypes {\r\n  return {\r\n    type: ADD_PROFILE,\r\n    payload: profile\r\n  };\r\n}\r\n\r\nexport function checkPass(password: string[]): ProfileActionTypes {\r\n  return {\r\n    type: CHECK_PASS,\r\n    payload: password\r\n  };\r\n}\r\n\r\nexport function logOut(profile: Profile): ProfileActionTypes {\r\n  return {\r\n    type: LOG_OUT,\r\n    payload: profile\r\n  };\r\n}\r\n\r\nexport function updateProfile(fields: string[]) : ProfileActionTypes {\r\n    return {\r\n        type: UPDATE_PROFILE,\r\n        payload: fields\r\n    }\r\n}","import { StringLiteral } from \"@babel/types\";\r\n\r\nexport interface Profile { // Template for our Profile type\r\n  id: number;\r\n  name: string;\r\n  aboutMe: string;\r\n  password: string;\r\n  loggedIn: boolean;\r\n  city: string;\r\n  cohort:string;\r\n  programming: string;\r\n  spoken: string\r\n}\r\n\r\nexport interface ProfileState { // Template for our Profile State\r\n  profiles: Profile[];\r\n  loggedIn: boolean;\r\n  numUsers: number;\r\n}\r\n // The 4 reducers TYPES we have!\r\nexport const ADD_PROFILE = \"ADD_PROFILE\";\r\nexport const CHECK_PASS = \"CHECK_PASS\";\r\nexport const LOG_OUT = \"LOG_OUT\";\r\nexport const UPDATE_PROFILE = \"UPDATE_PROFILE\";\r\n\r\n\r\n// The templates for our reducers and their TYPE and the payload that they expect!\r\ninterface addProfile {\r\n  type: typeof ADD_PROFILE;\r\n  payload: Profile;\r\n}\r\ninterface checkPass {\r\n  type: typeof CHECK_PASS;\r\n  payload: string[];\r\n}\r\n\r\ninterface logOut {\r\n  type: typeof LOG_OUT;\r\n  payload: Profile;\r\n}\r\n\r\ninterface updateProfile {\r\n    type: typeof UPDATE_PROFILE,\r\n    payload: string[]\r\n}\r\n\r\n// export the different actions into on ActionType variable\r\nexport type ProfileActionTypes = addProfile | checkPass | logOut | updateProfile;\r\n","import * as React from \"react\";\r\nimport { updateProfile } from \"../store/actions/actions\";\r\nimport { Link, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\nimport { logOut } from \"../store/actions/actions\";\r\nimport { Profile } from \"../store/types/types\";\r\nimport { RootState } from \"../store\";\r\nimport ProfilePage, { IProfilePageProps } from \"./ProfilePage\";\r\nimport { connect } from \"react-redux\";\r\nimport { ProfileActionTypes } from \"../store/types/types\";\r\n\r\nimport {\r\n  Card,\r\n  Image,\r\n  Grid,\r\n  Input,\r\n  Divider,\r\n  Container,\r\n  Header,\r\n  Radio,\r\n  Form,\r\n  Segment,\r\n  TextArea,\r\n  Button,\r\n  List\r\n} from \"semantic-ui-react\";\r\n\r\nexport interface IEditProfileState { // This holds the states of the current component that AREN'T passed as global variables. They are limited to only affecting this page.\r\n  city: string;\r\n  cohort: string;\r\n  spoken: string;\r\n  programming: string;\r\n  aboutMe: string;\r\n  redirect: boolean;\r\n}\r\n\r\nexport interface IEditProfilePageProps { // This holds the variables that are passed from the store. mapStateToProps and connect link to this interface so that we can call our reducers and view the store state.\r\n  match: any;\r\n  profiles: Profile[]; // The list of our users\r\n  logOut: typeof logOut; // A reducer\r\n  updateProfile: typeof updateProfile; // A reducer\r\n}\r\n\r\nexport class EditProfilePage extends React.Component<\r\n  IEditProfilePageProps,\r\n  IEditProfileState\r\n> {\r\n  constructor(props: IEditProfilePageProps) {\r\n    super(props);\r\n    this.state = { // initializing our local state variables (these are the blank input vales)\r\n      city: \"\",\r\n      cohort: \"\",\r\n      spoken: \"\",\r\n      programming: \"\",\r\n      aboutMe: \"\",\r\n      redirect: false\r\n    };\r\n  }\r\n\r\n  handleCityChange = (e: React.FormEvent<HTMLInputElement>) => { // update our local state variables as the user inputs the city they want to change their profile value to\r\n    this.setState({ city: e.currentTarget.value });\r\n  };\r\n  handleCohortChange = (e: React.FormEvent<HTMLInputElement>) => { // update our local state variables as the user inputs the cohort they want to change their profile value to\r\n    this.setState({ cohort: e.currentTarget.value });\r\n  };\r\n  handleSpokenChange = (e: React.FormEvent<HTMLInputElement>) => { // update our local state variables as the user inputs the spoken language they want to change their profile value to\r\n    this.setState({ spoken: e.currentTarget.value });\r\n  };\r\n  handleProgrammingChange = (e: React.FormEvent<HTMLInputElement>) => { //..etc\r\n    this.setState({ programming: e.currentTarget.value });\r\n  };\r\n  handleAboutMeChange = (e: React.FormEvent<HTMLInputElement>) => { //.etc\r\n    this.setState({ aboutMe: e.currentTarget.value });\r\n  };\r\n\r\n  handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => { // Our update profile function that calls the update profile REDUCER!\r\n    // this updates our users profile\r\n    event.preventDefault();\r\n\r\n    let { city, cohort, spoken, programming, aboutMe } = this.state; // these are the fields that can be updated on our edit profile page\r\n    let { updateProfile, profiles } = this.props; // updateProfile is the function imported from actions and profiles in our array of saved profiles\r\n    let uName = profiles.filter(profile => profile.loggedIn == true); // find out who user is logged in\r\n\r\n    if (uName != null) {\r\n      let update: string[] = [\r\n        uName[0].name,\r\n        city,\r\n        cohort,\r\n        spoken,\r\n        programming,\r\n        aboutMe\r\n      ];\r\n      updateProfile(update); // our update profile REDUCER!\r\n    }\r\n\r\n    this.setState({ city: \"\" }); // resets the input fields after update.\r\n  };\r\n\r\n  handleRedirect = () => {\r\n    this.setState({ redirect: true }); // Sets a state that tells us which page to link to\r\n  };\r\n\r\n  loggedOut = () => {\r\n    let { logOut, profiles } = this.props;\r\n\r\n    let uName = profiles.filter(profile => profile.loggedIn == true); // find out who user is logged in\r\n\r\n    console.log(uName);\r\n\r\n    logOut(uName[0]); // log that user out - logOut is a reducer and uName[0] is the username of the logged in user\r\n    sessionStorage.setItem(\"loggedIn\", \"false\"); // log us out of our sessionStorage. This is still cheating a bit!\r\n    sessionStorage.setItem(\"userName\", \"\");\r\n    window.location.href = \"/\";\r\n  };\r\n  \r\n  // componentDidMount(){\r\n  //   let { profiles } = this.props;\r\n  //   sessionStorage.setItem(\r\n  //     // after changes to our store, we want to save them in our sessionStorage\r\n  //     \"profiles\",\r\n  //     JSON.stringify(profiles)\r\n  //   );\r\n  // }\r\n\r\n  public render() {\r\n    let { profiles } = this.props;\r\n\r\n    let uName = profiles.filter(profile => profile.loggedIn == true); // find out who user is logged in\r\n\r\n    let { aboutMe, name, password, id, loggedIn, cohort, programming, spoken } = uName[0]; // These are our users profile fields, these are the variables that we will put into the JSX.\r\n\r\n    if (this.state.redirect === true) {\r\n      // in handleRedirect we set this state variable if we want to go to Profile Page\r\n      return (\r\n        <Router>\r\n          {/* Render the Profile Page */}\r\n          <Link to=\"\" component={ProfilePage} />\r\n\r\n          {/* Change the URL to /profile/**Logged in User** */}\r\n          <Redirect to={`/profile/${name}`} />\r\n        </Router>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Grid columns=\"equal\">\r\n        <Grid.Row>\r\n          <Grid.Column width={5}></Grid.Column>\r\n          <Grid.Column></Grid.Column>\r\n          <Grid.Column color=\"yellow\">\r\n            <Input\r\n              action=\"Search\"\r\n              placeholder=\"Search TechCareers Hive\"\r\n              size=\"huge\"\r\n            />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Divider horizontal>techcareers hive </Divider>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Container fluid>\r\n              <Card>\r\n                <Image\r\n                  src=\"https://react.semantic-ui.com/images/avatar/large/matthew.png\"\r\n                  wrapped\r\n                  ui={false}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header>{name}</Card.Header>\r\n                  <Card.Meta>\r\n                    <span className=\"date\">Joined in 2020</span>\r\n                  </Card.Meta>\r\n                  <Card.Description>\r\n                    {aboutMe}\r\n                  </Card.Description>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                  {/* <a>\r\n              <Icon name='user' />\r\n              22 Friends\r\n            </a> */}\r\n                </Card.Content>\r\n              </Card>\r\n              {/* <Header as='h1'> <i className=\"user circle icon\"></i></Header> */}\r\n              <Radio as=\"h3\" label=\"Education\" defaultChecked />\r\n              <br></br>\r\n              <Radio label=\"Events\" defaultChecked />\r\n              <br></br>\r\n              <Radio label=\"Photos\" defaultChecked />\r\n              <br></br>\r\n              <br></br>\r\n              <br></br>\r\n              Groups<br></br>\r\n              <Radio label=\"JavaScript\" defaultChecked />\r\n            </Container>\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            {\" \"}\r\n            <Divider vertical></Divider>\r\n          </Grid.Column>\r\n\r\n          <Grid.Column>\r\n            <Header as=\"h2\" color=\"green\" textAlign=\"center\">\r\n              Edit profile\r\n            </Header>\r\n            <Form size=\"large\">\r\n              <Segment stacked>\r\n                <Form.Input\r\n                  fluid\r\n                  icon=\"home\"\r\n                  iconPosition=\"left\"\r\n                  placeholder=\"Current City\"\r\n                  value={this.state.city}\r\n                  onChange={this.handleCityChange}\r\n                />\r\n                <Form.Input\r\n                  fluid\r\n                  icon=\"users\"\r\n                  iconPosition=\"left\"\r\n                  placeholder=\"Cohort\"\r\n                  type=\"text\"\r\n                  value={this.state.cohort}\r\n                  onChange={this.handleCohortChange}\r\n                />\r\n                <Form.Input\r\n                  fluid\r\n                  icon=\"language\"\r\n                  iconPosition=\"left\"\r\n                  placeholder=\"Spoken Languages\"\r\n                  type=\"text\"\r\n                  value={this.state.spoken}\r\n                  onChange={this.handleSpokenChange}\r\n                />\r\n                <Form.Input\r\n                  fluid\r\n                  icon=\"code\"\r\n                  iconPosition=\"left\"\r\n                  placeholder=\"Programming Languages\"\r\n                  type=\"text\"\r\n                  value={this.state.programming}\r\n                  onChange={this.handleProgrammingChange}\r\n                />\r\n                <Form.Field\r\n                  control={TextArea}\r\n                  label=\"About\"\r\n                  placeholder=\"Tell us more about you...\"\r\n                  value={this.state.aboutMe}\r\n                  onChange={this.handleAboutMeChange}\r\n                />\r\n                <Button onClick={this.handleClick} color=\"green\">\r\n                  Save Changes\r\n                </Button>\r\n              </Segment>\r\n\r\n              <Button color=\"green\" onClick={this.handleRedirect}>\r\n                Profile\r\n              </Button>\r\n              <Button color=\"red\" onClick={this.loggedOut}>\r\n                Log Out\r\n              </Button>\r\n            </Form>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState, ownProps: IEditProfilePageProps) => { // mapStateToProps brings the profile in from our initialState (defined and updated in the reducer)\r\n  return {\r\n    profiles: state.profile.profiles,\r\n    loggedIn: state.profile.loggedIn // Logged in is also brought in just in case our user logs our from this page\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { updateProfile, logOut })( // connect 'connects' this component(EditProfilePage.tsx) with our store and 'connects' the reducer functions 'updateProfile and logOut'.\r\n  EditProfilePage // This exports our connected component(EditProfilePage.tsx) with the store linked to it.\r\n);\r\n","import * as React from \"react\";\r\nimport { RootState } from \"../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { Profile } from \"../store/types/types\";\r\nimport { logOut } from \"../store/actions/actions\";\r\nimport EditProfilePage from \"./EditProfilePage\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  Switch,\r\n  Redirect\r\n} from \"react-router-dom\";\r\n\r\nimport {\r\n  Image,\r\n  Segment,\r\n  Grid,\r\n  Dropdown,\r\n  Container,\r\n  Header,\r\n  Radio,\r\n  Form,\r\n  TextArea,\r\n  Button\r\n} from \"semantic-ui-react\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\n\r\nexport interface IProfilePageProps { // Variables passed in from the store state\r\n  match: any;\r\n  profiles: Profile[];\r\n  logOut: typeof logOut;\r\n}\r\n\r\nexport interface IProfilePageState { // our local state variables\r\n  redirect: boolean;\r\n}\r\n\r\nexport class ProfilePage extends React.Component<\r\n  IProfilePageProps,\r\n  IProfilePageState\r\n> {\r\n  constructor(props: IProfilePageProps) {\r\n    super(props);\r\n    this.state = { redirect: false };\r\n  }\r\n\r\n  loggedOut = () => { // The function that calls our logOut REDUCER!\r\n    let { logOut, profiles } = this.props; // The store states logOut REDUCER and profiles array\r\n\r\n    let uName = profiles.filter(profile => profile.loggedIn == true); // filter through the profiles array and return any profile that has it's loggedIn field set to true.\r\n\r\n    logOut(uName[0]); // Pass the profile to the logOut REDUCER! It takes in a Profile[] as it's payload.\r\n\r\n    // When we log out we want to save our global state (This might not be necessary anymore)\r\n    sessionStorage.setItem(\"loggedIn\", \"false\");\r\n    sessionStorage.setItem(\"userName\", \"\"); // username of the person who is logged in\r\n    window.location.href = \"/\";\r\n  };\r\n\r\n  handleRedirect = () => { // This sets our local state variable that determines if we go to the Edit Profile Page\r\n    this.setState({ redirect: true }); \r\n  };\r\n\r\n  public render() {\r\n    let { profiles } = this.props; // load in the profiles from the store state\r\n\r\n    let uName = profiles.filter(profile => profile.loggedIn == true); // find out who user is logged in\r\n    let { aboutMe, name, password, id, loggedIn } = uName[0]; // Deconstructing the current user's store profile fields\r\n\r\n    if (this.state.redirect === true) { // If we are wanting to redirect to the Edit Profile Page\r\n      return (\r\n        <Router> \r\n          {/* Render the EditProfilePage */}\r\n          <Link to=\"\" component={EditProfilePage} />\r\n          \r\n          {/* Redirect the URL to /edit-profile/**name of the Logged in User** */}\r\n          <Redirect to={`/edit-profile/${name}`} />\r\n        </Router>\r\n      );\r\n    }\r\n\r\n    return ( // If there is no redirect request. Render the Profile Page\r\n      <Segment>\r\n        <Grid divided=\"vertically\">\r\n          <h2>Welcome {name}!</h2>\r\n          <Grid.Row columns={5}>\r\n            <Grid.Column></Grid.Column>\r\n            <Grid.Column floated=\"right\">\r\n              <Dropdown text=\"Groups\">\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item text=\"Group 1\" />\r\n                  <Dropdown.Item text=\"Group 2\" />\r\n                  <Dropdown.Item text=\"Group 3\" />\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </Grid.Column>\r\n            <Grid.Column>\r\n              <Dropdown text=\"Class Mates\">\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item text=\"Andrew\" />\r\n                  <Dropdown.Item text=\"Charles\" />\r\n                  <Dropdown.Item text=\"Cai\" />\r\n                  <Dropdown.Item text=\"Trina\" />\r\n                  <Dropdown.Item text=\"Mohammad\" />\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n\r\n          <Grid.Row columns={3}>\r\n            <Grid.Column>\r\n              <h3>About Me: {aboutMe}</h3>\r\n              <Container fluid>\r\n                <br></br>\r\n                <Header as=\"h4\"> Explore </Header>\r\n\r\n                <Radio as=\"h2\" label=\"Networking Events\" defaultChecked />\r\n                <br></br>\r\n                <Radio as=\"h2\" label=\"Previous Cohorts\" defaultChecked />\r\n                <br></br>\r\n                <Radio as=\"h2\" label=\"Groups\" defaultChecked />\r\n                <br></br>\r\n                <Radio as=\"h2\" label=\"Additional Resources\" defaultChecked />\r\n                <br></br>\r\n                <Radio as=\"h2\" label=\"Linkedin\" defaultChecked />\r\n              </Container>\r\n            </Grid.Column>\r\n            <Grid.Column>\r\n              <Form>\r\n                <Segment>\r\n                  <TextArea\r\n                    placeholder=\"Create a Post\"\r\n                    style={{ minHeight: 150 }}\r\n                  />\r\n                  <Segment>\r\n                    {\" \"}\r\n                    <Button content=\"Photos\" />\r\n                    <Button content=\"tag a classmate\" />\r\n                  </Segment>\r\n                </Segment>\r\n              </Form>{\" \"}\r\n              <br></br>\r\n              <Form>\r\n                <Segment>\r\n                  <TextArea\r\n                    placeholder=\"Ask a question\"\r\n                    style={{ minHeight: 150 }}\r\n                  />\r\n                  <Segment>\r\n                    {\" \"}\r\n                    <Button content=\"Screen Snippet\" />\r\n                    <Button content=\"Group\" />\r\n                  </Segment>\r\n                </Segment>\r\n              </Form>\r\n            </Grid.Column>\r\n            <Grid.Column>\r\n              <Calendar />\r\n              <br></br>\r\n\r\n              <Button color=\"green\" onClick={this.handleRedirect}>\r\n                Edit Profile\r\n              </Button>\r\n\r\n              <Button color=\"red\" onClick={this.loggedOut}>\r\n                Log Out\r\n              </Button>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Segment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState, ownProps: IProfilePageProps) => { // mapStateToProps connects the store's initial state variables with ProfilePage component\r\n  return {\r\n    profiles: state.profile.profiles,\r\n    loggedIn: state.profile.loggedIn\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { logOut })(ProfilePage); // connect imports the logOut REDUCER from our store and returns our connected our ProfilePage component \r\n","import * as React from \"react\";\r\nimport '../../src/App.css';\r\nimport {\r\n  Divider,\r\n  Button,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Segment,\r\n  Container,\r\n  Input,\r\n  Icon,\r\n  Image\r\n} from \"semantic-ui-react\";\r\nimport { checkPass, addProfile } from \"../store/actions/actions\";\r\n\r\nimport { ProfileActionTypes, Profile } from \"../store/types/types\";\r\nimport { RootState } from \"../store\";\r\nimport { connect } from \"react-redux\";\r\nimport { BrowserRouter as Router, Link, Redirect } from \"react-router-dom\";\r\nimport ProfilePage from \"./ProfilePage\";\r\nimport NavBar from \"./subcomponents/NavBar\";\r\n\r\nexport interface IHomeProps { // our store state variables\r\n  checkPass: typeof checkPass; // reducer\r\n  addProfile: typeof addProfile; // reducer\r\n  profiles: Profile[]; // our users\r\n  loggedIn: boolean; // a state variable\r\n  location?: Router;\r\n}\r\n\r\nexport interface IHomeState { // Our local state variables that change as we input either our login and password, or our new user information.\r\n  userName: string; // username for login\r\n  passWord: string;\r\n  signUpUser: string; // sign up username\r\n  signUpPass: string;\r\n}\r\n\r\nexport class Home extends React.Component<IHomeProps, IHomeState> {\r\n  constructor(props: IHomeProps) {\r\n    super(props);\r\n    this.state = { userName: \"\", passWord: \"\", signUpPass: \"\", signUpUser: \"\" };\r\n  }\r\n \r\n  // the 4 functions (methods) below update our form fields as the user inputs them\r\n  handleUserChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({ userName: e.currentTarget.value });\r\n  };\r\n\r\n  handlePassChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({ passWord: e.currentTarget.value });\r\n  };\r\n\r\n  handleSignUserChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({ signUpUser: e.currentTarget.value });\r\n  };\r\n\r\n  handleSignPassChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    this.setState({ signUpPass: e.currentTarget.value });\r\n  };\r\n\r\n\r\n  // This is our login method that call the checkPass REDUCER!\r\n  handleOnClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    event.preventDefault();\r\n    let { userName, passWord } = this.state; // our local state login and password\r\n    let { profiles, checkPass, loggedIn } = this.props; // our store variables and reducers that are passed from mapStateToProps and connect!\r\n\r\n    let cred: Array<string> = [userName, passWord]; // Our reducer (checkPass) takes in a string[]...so a ['username', 'password'] array\r\n    checkPass(cred); // a REDUCER!\r\n\r\n    this.setState({ userName: \"\", passWord: \"\" }); // Resets our local state username and password\r\n  };\r\n\r\n  handleSignUp = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => { // our sign up function that calls our addProfile REDUCER!\r\n    e.preventDefault();\r\n\r\n    let { signUpPass, signUpUser } = this.state; // info put into form\r\n    let { addProfile, profiles } = this.props; // store variables and reducers\r\n    let duplicated: boolean = false;\r\n\r\n    profiles.forEach((profile, i) => { // Go through each profile in the store's profiles\r\n      if (profile.name == signUpUser) { // Check if that profile has the same name as the text entered in the sign up field\r\n        duplicated = true; // if the text entered in the sign up field matches a name in the store's profile array, set duplicated to true (Tell the function that you found a user that already has that name)\r\n      }\r\n    });\r\n\r\n    if (duplicated == false) { // if you didn't find a user with the same name that was entered in the sign up input box\r\n      addProfile({ //add that user to the stores profile array using the addProfile REDUCER!\r\n        // reducer/action\r\n        id: 2,\r\n        name: signUpUser,\r\n        password: signUpPass,\r\n        aboutMe: \"\",\r\n        loggedIn: true,\r\n        city: \"\",\r\n        cohort: \"\",\r\n        programming: \"\",\r\n        spoken: \"\"\r\n      });\r\n    }\r\n\r\n    this.setState({ signUpUser: \"\", signUpPass: \"\" }); // Reset the local state variables\r\n  }; \r\n  public render() {\r\n    let { loggedIn, profiles } = this.props; // Get the store's initial state's loggedIn variable and profile array\r\n\r\n    if (loggedIn === true || sessionStorage.getItem(\"loggedIn\") == \"true\") { // if the store's loggedIn variable is set, or the sessionState loggedIn variable is set then we can set up our Router for moving to the appropriate page\r\n      sessionStorage.setItem(\"profiles\", JSON.stringify(profiles)); // save the sessionStorage profiles (not sure if this is necessary)\r\n      let userName = sessionStorage.getItem(\"userName\"); // save the sessionStorage username \r\n      let uName = profiles.filter(profile => profile.loggedIn == true); // find the profile of the user that is logged in\r\n\r\n      let destString = \"\"; // intialize null string for the Redirect Route\r\n\r\n      if (loggedIn == true) { // If a user is logged in through the store state\r\n        sessionStorage.setItem(\"userName\", uName[0].name); // save to global\r\n        sessionStorage.setItem(\"loggedIn\", \"true\"); // save to global\r\n        destString = uName[0].name; // set the destination for Redirect Route to the name of the logged in User\r\n      } else if (userName != undefined) { // if the global username is set\r\n        sessionStorage.setItem(\"userName\", userName); // I dont think this is necessary\r\n        destString = userName; // set the destination for Redirect Route to the name of the sessionStorage username\r\n      }\r\n\r\n      return ( // If the user is logged in, take them to the profile page\r\n        <>\r\n          <Router>\r\n            {/* Redirect to the /profile/ page with their username == destString */}\r\n            <Redirect to={`/profile/${destString}`} /> \r\n            {/* Render the ProfilePage component */}\r\n            <Link to=\"\" component={ProfilePage} /> \r\n          </Router>\r\n        </>\r\n      );\r\n    }\r\n    else{\r\n      sessionStorage.setItem(\"profiles\", JSON.stringify(profiles)); // save the sessionStorage profiles (not sure if this is necessary)\r\n    }\r\n    return ( // If the user isn't logged in, render the HomePage\r\n      <Segment>\r\n  \r\n      <Grid columns=\"equal\">\r\n        <Grid.Row>\r\n        <div>\r\n    <Image src='Logo.png'  height='150' width='250' circular/>\r\n    <span></span>\r\n  </div>\r\n          <Grid.Column></Grid.Column>\r\n          <Grid.Column></Grid.Column>\r\n          <Grid.Column floated=\"right\"><br></br><br></br>\r\n            <Input\r\n              fluid\r\n              icon=\"user\"\r\n              iconPosition=\"left\"\r\n              placeholder=\"Username\"\r\n              value={this.state.userName}\r\n              onChange={this.handleUserChange}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column floated=\"right\"><br></br><br></br>\r\n            <Input\r\n              fluid\r\n              icon=\"lock\"\r\n              iconPosition=\"left\"\r\n              placeholder=\"Password\"\r\n              type=\"password\"\r\n              value={this.state.passWord}\r\n              onChange={this.handlePassChange}\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column floated=\"right\"><br></br><br></br>\r\n            <Button\r\n              color=\"yellow\"\r\n              fluid\r\n              size=\"large\"\r\n              onClick={this.handleOnClick}\r\n            >\r\n              Login\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Divider horizontal>Techcareers hive</Divider>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <Container fluid>\r\n              <Header as=\"h2\">TECHCareers Hive</Header><br></br>\r\n              <p>Connect with classmates and techcareers alumni.</p>\r\n              <p>Join groups of your interest.</p>\r\n              <p>Check networking events.</p>\r\n              <p>AND More!!!!!!!.</p>\r\n            </Container>\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            {\" \"}\r\n            <Divider vertical>  <Icon loading name='forumbee' size='massive' color='yellow' /> </Divider>\r\n          </Grid.Column>\r\n          <Grid.Column>\r\n            <Header as=\"h2\" color=\"green\" textAlign=\"center\">\r\n              Sign -Up\r\n            </Header>\r\n            <Form size=\"large\">\r\n              <Segment stacked>\r\n                <Form.Input\r\n                  fluid\r\n                  icon=\"user\"\r\n                  iconPosition=\"left\"\r\n                  placeholder=\"username\"\r\n                  value={this.state.signUpUser}\r\n                  onChange={this.handleSignUserChange}\r\n                />\r\n\r\n                <Form.Input\r\n                  fluid\r\n                  icon=\"lock\"\r\n                  iconPosition=\"left\"\r\n                  placeholder=\"Password\"\r\n                  type=\"password\"\r\n                />\r\n                <Form.Input\r\n                  fluid\r\n                  icon=\"lock\"\r\n                  iconPosition=\"left\"\r\n                  placeholder=\"confirm-Password\"\r\n                  type=\"password\"\r\n                  value={this.state.signUpPass}\r\n                  onChange={this.handleSignPassChange}\r\n                />\r\n                <Button\r\n                  color=\"green\"\r\n                  fluid\r\n                  size=\"large\"\r\n                  onClick={this.handleSignUp}\r\n                >\r\n                  SignUp\r\n                </Button>\r\n              </Segment>\r\n            </Form>\r\n          </Grid.Column>\r\n         \r\n        </Grid.Row>\r\n   \r\n      </Grid>\r\n     \r\n      </Segment>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState, ownProps: IHomeProps) => { // mapStateToProps connects our store with this component\r\n  return {\r\n    profiles: state.profile.profiles,\r\n    loggedIn: state.profile.loggedIn\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { checkPass, addProfile })(Home); // connect loads in the checkPass and addProfile REDUCERS!. It also exports our Component with the store connected\r\n","import * as React from \"react\";\r\n\r\nexport interface IErrorProps {}\r\n\r\nexport default class Error extends React.Component<IErrorProps> {\r\n  public render() {\r\n    return <h2>Error Page!!!</h2>;\r\n  }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  Switch,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport Home from \"./components/HomePage\";\r\nimport EditProfilePage from \"./components/EditProfilePage\";\r\nimport ProfilePage from \"./components/ProfilePage\";\r\nimport ErrorPage from \"./components/ErrorPage\";\r\nimport { Profile } from \"./store/types/types\";\r\nimport { RootState } from \"./store\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nexport interface IAppProps {\r\n  loggedIn: boolean;\r\n  profiles: Profile[];\r\n}\r\n\r\nexport class App extends React.Component<IAppProps> {\r\n  public render() {\r\n\r\n    let {profiles, loggedIn} = this.props;\r\n\r\n    if (sessionStorage.getItem(\"loggedIn\") === 'true') { // check session Storage to see if the global logged in variable is set. This variable is changed in ProfilePage.tsx in loggedOut(), in HomePage.tsx within the render()  fucntion\r\n      const uName = sessionStorage.getItem(\"userName\"); // if the loggedIn global variable is set, then the global userName variable should be set\r\n\r\n      return ( // if you're logged in, switch through the paths in the order shown below. There should be a reroute to the profile page if you manually enter the homepage url.\r\n        <>\r\n          <Router>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n\r\n              <Route path=\"/profile\">\r\n                <Link to=\"\" component={ProfilePage} />\r\n                <Redirect to={`/profile/${uName}`} />\r\n              </Route>\r\n              <Route path={`/edit-profile/${uName}`} component={EditProfilePage} />\r\n              <Route component={ErrorPage} />\r\n            </Switch>\r\n          </Router>\r\n        </>\r\n      );\r\n    }\r\n\r\n    return ( // If you're not logged in you're be routed to the Home page ('/') or to the error page if you try to access any other URL other than '/'\r\n      <>\r\n        <Router>\r\n          <Switch>\r\n            <Route>\r\n              <Redirect from=\"/*\" to=\"/\"/>\r\n              <Route exact path=\"/\" component={Home}/>\r\n            </Route>\r\n            <Route component={ErrorPage} />\r\n          </Switch>\r\n        </Router>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n  return {\r\n    loggedIn: state.profile.loggedIn,\r\n    profiles: state.profile.profiles\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  ProfileState,\r\n  ADD_PROFILE,\r\n  ProfileActionTypes,\r\n  CHECK_PASS,\r\n  LOG_OUT,\r\n  UPDATE_PROFILE,\r\n  Profile\r\n} from \"../types/types\";\r\n\r\nimport { identifier } from \"@babel/types\";\r\n\r\nlet initialState: ProfileState = {\r\n  // Our base initial state - We have 2 profiles with their fields, a loggedIn state set initially to false, and the number of users numUsers after we add another profile.\r\n  profiles: [\r\n    {\r\n      id: 1,\r\n      name: \"Andrew\",\r\n      aboutMe: \"I'm Andrew\",\r\n      password: \"password\",\r\n      loggedIn: false,\r\n      city: \"\",\r\n      cohort: \"\",\r\n      programming: \"\",\r\n      spoken: \"\"\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Mo\",\r\n      aboutMe: \"I'm Mo\",\r\n      password: \"pass\",\r\n      loggedIn: false,\r\n      city: \"\",\r\n      cohort: \"\",\r\n      programming: \"\",\r\n      spoken: \"\"\r\n    }\r\n  ],\r\n  loggedIn: false,\r\n  numUsers: 3\r\n};\r\n\r\n// The following 6 lines keep our state in a global sessionStorage just in case someone refreshes a page, or manually enters a URL\r\nlet update = sessionStorage.getItem(\"profiles\");\r\nlet log = sessionStorage.getItem(\"loggedIn\");\r\n\r\nlet updateState: Profile[];\r\nif (update !== null) {\r\n  updateState = JSON.parse(update);\r\n  initialState = {\r\n    profiles: updateState,\r\n    loggedIn: (log === 'true'),\r\n    numUsers: updateState.length + 1\r\n  };\r\n}\r\n\r\n// Our REDUCER!\r\nexport function profileReducer(\r\n  state = initialState, // Our initial state is pushed\r\n  action: ProfileActionTypes\r\n): ProfileState {\r\n  switch (action.type) {\r\n    // The addProfile reducer\r\n    case ADD_PROFILE:\r\n      action.payload.id = state.numUsers; // If you're adding a new profile, get the number of users so far and set the profile id to that numUsers\r\n\r\n      return {\r\n        ...state,\r\n        loggedIn: true, // change the loggedIn state to true\r\n        profiles: [...state.profiles, action.payload], // push the action.payload (Which is a profile) onto the profile array of the \"store State / (initialState)\"\"\r\n        numUsers: ++state.numUsers // Increase the stores number of users variable\r\n      };\r\n\r\n    //The checkPass reducer\r\n    case CHECK_PASS:\r\n      let cred = state.loggedIn; // Get the loggedIn state\r\n      let index = 0; // initialize a variable that will tell us what the index of the logged in user is.\r\n\r\n      let uName = state.profiles.filter( // store the profile of the user that matches the action.payload[0] which is the username in cred [username, password]\r\n        profile => profile.name === action.payload[0]\r\n      );\r\n\r\n      if (uName[0] != undefined) { // if there was a match\r\n        state.profiles.forEach((profile, i) => { // iterate through each profile\r\n          if (profile.name === uName[0].name) { // until we find the name of that user\r\n            index = i; // and store the index of that profile\r\n          }\r\n        });\r\n      } else // if there was no match\r\n        return { // don't make any changes\r\n          ...state\r\n        };\r\n\r\n      if (uName.length) { // if there was a match\r\n        if (uName[0].password === action.payload[1]) { // check if the users password matches the password the user entered\r\n          cred = true; // set cred = true\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        loggedIn: cred, // loggedIn = true or false depending on the match or not\r\n        profiles: [ // push all the unpacked and changed below into the stores profile\r\n          ...state.profiles.slice(0, index), // unpack the profiles up until the users index\r\n          { ...state.profiles[index], loggedIn: cred }, // update the users profile:loggedIn field as either true or false\r\n          ...state.profiles.slice(index + 1) // unpack the profiles after the users index\r\n        ]\r\n      };\r\n\r\n    // the logOut REDUCER!\r\n    case LOG_OUT:\r\n      let uNameLog = state.profiles.filter( // find the name of the user that is loggedIn\r\n        profile => profile.name === action.payload.name \r\n      );\r\n      let indexLog = 0; \r\n      state.profiles.forEach((profile, i) => { // find the index of the users profile \r\n        if (profile.name === uNameLog[0].name) {\r\n          indexLog = i;\r\n        }\r\n      });\r\n      return {\r\n        ...state,\r\n        loggedIn: false, // set stores loggedIn as false\r\n        profiles: [ // push all the unpacked store profiles into the stores profile array\r\n          ...state.profiles.slice(0, indexLog),\r\n          { ...state.profiles[indexLog], loggedIn: false }, // set the loggedIn field of the selected users profile\r\n          ...state.profiles.slice(indexLog + 1)\r\n        ]\r\n      };\r\n    \r\n    \r\n      // the updateProfile REDUCER!\r\n    case UPDATE_PROFILE:\r\n      let name = state.profiles.filter(\r\n        profile => profile.name === action.payload[0] // match the profile with the action.payload[0] (username)\r\n      );\r\n      let indexUpdate = 0;\r\n      state.profiles.forEach((profile, i) => {\r\n        if (profile.name === name[0].name) { // find the index of the user who's name matches the payload\r\n          indexUpdate = i;\r\n        }\r\n      });\r\n      console.log(action.payload);\r\n      return {\r\n        ...state,\r\n        profiles: [\r\n          ...state.profiles.slice(0, indexUpdate), // unpack the states before the chosen user's profile index\r\n          {\r\n            ...state.profiles[indexUpdate], // Update all the changable fields for the user (This can have more functionality where you don't change ones that are empty!)\r\n            city: action.payload[1] === \"\" ? state.profiles[indexUpdate].city : action.payload[1],\r\n            cohort: action.payload[2] === \"\" ? state.profiles[indexUpdate].cohort : action.payload[2],\r\n            programming: action.payload[3] === \"\" ? state.profiles[indexUpdate].programming : action.payload[3],\r\n            spoken: action.payload[4] === \"\" ? state.profiles[indexUpdate].spoken : action.payload[4],\r\n            aboutMe: action.payload[5] === \"\" ? state.profiles[indexUpdate].aboutMe : action.payload[5],\r\n          },\r\n          ...state.profiles.slice(indexUpdate + 1)\r\n        ]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { profileReducer } from \"./reducers/reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n  profile: profileReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(applyMiddleware())\r\n  );\r\n  return store;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport configureStore from \"./store\";\r\n\r\nconst store = configureStore;\r\n\r\nReactDOM.render(\r\n  <Provider store={store()}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}